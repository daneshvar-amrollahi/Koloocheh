# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2
import koloocheh_pb2 as koloocheh__pb2


class PeerToPeerStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.SearchFile = channel.unary_unary(
                '/PeerToPeer/SearchFile',
                request_serializer=koloocheh__pb2.SearchMessage.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                )
        self.FoundFile = channel.unary_unary(
                '/PeerToPeer/FoundFile',
                request_serializer=koloocheh__pb2.SearchResponse.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                )


class PeerToPeerServicer(object):
    """Missing associated documentation comment in .proto file."""

    def SearchFile(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FoundFile(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_PeerToPeerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'SearchFile': grpc.unary_unary_rpc_method_handler(
                    servicer.SearchFile,
                    request_deserializer=koloocheh__pb2.SearchMessage.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'FoundFile': grpc.unary_unary_rpc_method_handler(
                    servicer.FoundFile,
                    request_deserializer=koloocheh__pb2.SearchResponse.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'PeerToPeer', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class PeerToPeer(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def SearchFile(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/PeerToPeer/SearchFile',
            koloocheh__pb2.SearchMessage.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def FoundFile(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/PeerToPeer/FoundFile',
            koloocheh__pb2.SearchResponse.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class PeerMasterStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.PeerJoined = channel.unary_unary(
                '/PeerMaster/PeerJoined',
                request_serializer=koloocheh__pb2.Address.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                )
        self.GetNeighbours = channel.unary_unary(
                '/PeerMaster/GetNeighbours',
                request_serializer=koloocheh__pb2.Address.SerializeToString,
                response_deserializer=koloocheh__pb2.NeighbourList.FromString,
                )


class PeerMasterServicer(object):
    """Missing associated documentation comment in .proto file."""

    def PeerJoined(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetNeighbours(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_PeerMasterServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'PeerJoined': grpc.unary_unary_rpc_method_handler(
                    servicer.PeerJoined,
                    request_deserializer=koloocheh__pb2.Address.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'GetNeighbours': grpc.unary_unary_rpc_method_handler(
                    servicer.GetNeighbours,
                    request_deserializer=koloocheh__pb2.Address.FromString,
                    response_serializer=koloocheh__pb2.NeighbourList.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'PeerMaster', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class PeerMaster(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def PeerJoined(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/PeerMaster/PeerJoined',
            koloocheh__pb2.Address.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetNeighbours(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/PeerMaster/GetNeighbours',
            koloocheh__pb2.Address.SerializeToString,
            koloocheh__pb2.NeighbourList.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
