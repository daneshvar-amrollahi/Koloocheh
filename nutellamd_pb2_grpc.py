# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2
import nutellamd_pb2 as nutellamd__pb2


class PeerToPeerStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.HeartBeat = channel.unary_unary(
                '/PeerToPeer/HeartBeat',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                )
        self.TestRpc = channel.unary_unary(
                '/PeerToPeer/TestRpc',
                request_serializer=nutellamd__pb2.TestMessage.SerializeToString,
                response_deserializer=nutellamd__pb2.TestMessage.FromString,
                )
        self.SearchFile = channel.unary_unary(
                '/PeerToPeer/SearchFile',
                request_serializer=nutellamd__pb2.SearchMessage.SerializeToString,
                response_deserializer=nutellamd__pb2.SearchResponse.FromString,
                )


class PeerToPeerServicer(object):
    """Missing associated documentation comment in .proto file."""

    def HeartBeat(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def TestRpc(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SearchFile(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_PeerToPeerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'HeartBeat': grpc.unary_unary_rpc_method_handler(
                    servicer.HeartBeat,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'TestRpc': grpc.unary_unary_rpc_method_handler(
                    servicer.TestRpc,
                    request_deserializer=nutellamd__pb2.TestMessage.FromString,
                    response_serializer=nutellamd__pb2.TestMessage.SerializeToString,
            ),
            'SearchFile': grpc.unary_unary_rpc_method_handler(
                    servicer.SearchFile,
                    request_deserializer=nutellamd__pb2.SearchMessage.FromString,
                    response_serializer=nutellamd__pb2.SearchResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'PeerToPeer', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class PeerToPeer(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def HeartBeat(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/PeerToPeer/HeartBeat',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def TestRpc(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/PeerToPeer/TestRpc',
            nutellamd__pb2.TestMessage.SerializeToString,
            nutellamd__pb2.TestMessage.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SearchFile(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/PeerToPeer/SearchFile',
            nutellamd__pb2.SearchMessage.SerializeToString,
            nutellamd__pb2.SearchResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
